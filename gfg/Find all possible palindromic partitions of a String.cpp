// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution
{
public:
    bool isPalindrome(string str, int low, int high)
    {
        while (low < high)
        {
            if (str[low] != str[high])
                return false;
            low++;
            high--;
        }
        return true;
    }
    void allPalPartUtil(vector<vector<string>> &allPart, vector<string> &currPart,
                        int start, int n, string str)
    {
        // If 'start' has reached len
        if (start >= n)
        {
            allPart.push_back(currPart);
            return;
        }

        // Pick all possible ending points for substrings
        for (int i = start; i < n; i++)
        {
            // If substring str[start..i] is palindrome
            if (isPalindrome(str, start, i))
            {
                // Add the substring to result
                currPart.push_back(str.substr(start, i - start + 1));

                // Recur for remaining remaining substring
                allPalPartUtil(allPart, currPart, i + 1, n, str);

                // Remove substring str[start..i] from current
                // partition
                currPart.pop_back();
            }
        }
    }
    vector<vector<string>> allPalindromicPerms(string str)
    {
        int n = str.length();

        // To Store all palindromic partitions
        vector<vector<string>> allPart;

        // To store current palindromic partition
        vector<string> currPart;

        // Call recursive function to generate all partitions
        // and store in allPart
        allPalPartUtil(allPart, currPart, 0, n, str);

        // Print all partitions generated by above call
        for (int i = 0; i < allPart.size(); i++)
        {
            for (int j = 0; j < allPart[i].size(); j++)
                cout << allPart[i][j] << " ";
            cout << "\n";
        }
    }
};

// { Driver Code Starts.
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string S;

        cin >> S;

        Solution ob;
        vector<vector<string>> ptr = ob.allPalindromicPerms(S);

        for (int i = 0; i < ptr.size(); i++)
        {
            for (int j = 0; j < ptr[i].size(); j++)
            {
                cout << ptr[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
} // } Driver Code Ends